generator client {
  provider = "prisma-client-js"
   binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement()) @map("id")
  userId             Int       @map("user_id")
  type               String
  provider           String
  providerAccountId  String    @map("provider_account_id")
  refresh_token      String?
  access_token       String?   @db.Text // Adjusted maximum length
  expires_at         Int?      // In MySQL, store this as an INT, if necessary, manage it accordingly in your application
  token_type         String?
  scope              String?
  id_token           String?   @db.Text // Adjusted maximum length
  session_state      String?
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                 Int       @id @default(autoincrement()) @map("id")
  sessionToken       String    @unique @map("session_token")
  userId             Int       @map("user_id")
  expires            DateTime  // In MySQL, you can store this as DATETIME
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 Int       @id @default(autoincrement()) @map("id")
  name               String?   // Make optional if null emails are allowed
  email              String?   @unique  // Remove if null emails are allowed
  emailVerified      DateTime? @map("email_verified")
  image              String?
  occupation         String?
  age                Int?
  accounts           Account[]
  sessions           Session[]

  // Relation with Workspaces where the user is the owner
  workspaces         Workspace[] @relation("OwnerToWorkspace")

  // Relation with Workspaces where the user is a member
  workspacesAsMember Workspace[] @relation("MemberToWorkspace")

  @@map("users")
}

model Workspace {
  id                 Int       @id @default(autoincrement()) @map("id")
  name               String    @unique
  userEmail          String    @map("user_email")
  createdAt          DateTime  @default(now())

  user               User?     @relation("OwnerToWorkspace", fields: [userEmail], references: [email])
  tabs               Tab[]     @relation("WorkspaceToTab")
  members            User[]    @relation("MemberToWorkspace")

  @@map("workspaces")
}


model Tab {
  id                 Int       @id @default(autoincrement()) @map("id")
  title              String
  url                String    @db.Text
  image              String
  workspaceId        Int       @map("workspace_id")
  createdAt          DateTime  @default(now())

  workspace           Workspace? @relation("WorkspaceToTab", fields: [workspaceId], references: [id])

  @@map("tabs")
}
